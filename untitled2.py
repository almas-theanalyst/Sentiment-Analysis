# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1r2HtA2yNWbNFp-sUrRI2cYW_Bmtl83xB
"""

import os
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, classification_report
import nltk
from nltk.corpus import movie_reviews
import random


nltk.download('movie_reviews')


documents = [(movie_reviews.raw(fileid), category)
             for category in movie_reviews.categories()
             for fileid in movie_reviews.fileids(category)]


random.shuffle(documents)


texts, labels = zip(*documents)


df = pd.DataFrame({'text': texts, 'sentiment': labels})


print(df.head())


X_train, X_test, y_train, y_test = train_test_split(df['text'], df['sentiment'], test_size=0.2, random_state=42)


vectorizer = CountVectorizer(max_features=5000, stop_words='english')
X_train_vec = vectorizer.fit_transform(X_train)
X_test_vec = vectorizer.transform(X_test)


model = LogisticRegression(max_iter=1000)


model.fit(X_train_vec, y_train)


y_pred = model.predict(X_test_vec)


accuracy = accuracy_score(y_test, y_pred)
print(f'Accuracy: {accuracy * 100:.2f}%')


print(classification_report(y_test, y_pred, target_names=['Negative', 'Positive']))

!pip install gradio

# prompt: generate me a code for getting user input using gradio

import gradio as gr

def predict_sentiment(text):
    text_vec = vectorizer.transform([text])
    prediction = model.predict(text_vec)[0]
    return prediction

iface = gr.Interface(
    fn=predict_sentiment,
    inputs=gr.Textbox(lines=5, placeholder="Enter text here..."), # Change gr.inputs.Textbox to gr.Textbox
    outputs="text",
    title="Sentiment Analysis",
    description="Enter some text and the model will predict the sentiment (Positive or Negative).",
)

iface.launch()